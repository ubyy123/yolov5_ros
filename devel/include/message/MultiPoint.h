// Generated by gencpp from file message/MultiPoint.msg
// DO NOT EDIT!


#ifndef MESSAGE_MESSAGE_MULTIPOINT_H
#define MESSAGE_MESSAGE_MULTIPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace message
{
template <class ContainerAllocator>
struct MultiPoint_
{
  typedef MultiPoint_<ContainerAllocator> Type;

  MultiPoint_()
    : points()
    , strings()
    , points1()  {
    }
  MultiPoint_(const ContainerAllocator& _alloc)
    : points(_alloc)
    , strings(_alloc)
    , points1(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points_type;
  _points_type points;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _strings_type;
  _strings_type strings;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points1_type;
  _points1_type points1;





  typedef boost::shared_ptr< ::message::MultiPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::message::MultiPoint_<ContainerAllocator> const> ConstPtr;

}; // struct MultiPoint_

typedef ::message::MultiPoint_<std::allocator<void> > MultiPoint;

typedef boost::shared_ptr< ::message::MultiPoint > MultiPointPtr;
typedef boost::shared_ptr< ::message::MultiPoint const> MultiPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::message::MultiPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::message::MultiPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::message::MultiPoint_<ContainerAllocator1> & lhs, const ::message::MultiPoint_<ContainerAllocator2> & rhs)
{
  return lhs.points == rhs.points &&
    lhs.strings == rhs.strings &&
    lhs.points1 == rhs.points1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::message::MultiPoint_<ContainerAllocator1> & lhs, const ::message::MultiPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace message

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::message::MultiPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::message::MultiPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message::MultiPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message::MultiPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message::MultiPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message::MultiPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::message::MultiPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4c866f2a06c42321f068708a935d344";
  }

  static const char* value(const ::message::MultiPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4c866f2a06c4232ULL;
  static const uint64_t static_value2 = 0x1f068708a935d344ULL;
};

template<class ContainerAllocator>
struct DataType< ::message::MultiPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "message/MultiPoint";
  }

  static const char* value(const ::message::MultiPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::message::MultiPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] points\n"
"string[] strings\n"
"geometry_msgs/Point[] points1\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::message::MultiPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::message::MultiPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
      stream.next(m.strings);
      stream.next(m.points1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::message::MultiPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::message::MultiPoint_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "strings[]" << std::endl;
    for (size_t i = 0; i < v.strings.size(); ++i)
    {
      s << indent << "  strings[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.strings[i]);
    }
    s << indent << "points1[]" << std::endl;
    for (size_t i = 0; i < v.points1.size(); ++i)
    {
      s << indent << "  points1[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points1[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGE_MESSAGE_MULTIPOINT_H
